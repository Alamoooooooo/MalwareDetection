#输入图片处理
import os
import math
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
 
#生成图片路径和标签的List
 
train_dir = 'F:/1_Final/TFinput/'
 
Oad = []
label_Oad = []
Obe = []
label_Obe = []
 
#step1：获取所有的图片路径名，存放到对应的列表中，同时贴上标签，存放到label列表中。
#def get_files(file_dir, ratio):
def get_files(file_dir):
    for file in os.listdir(file_dir+'/Oad'):
        Oad.append(file_dir +'/Oad'+'/'+ file) 
        label_Oad.append(0)
    for file in os.listdir(file_dir+'/Obe'):
        Obe.append(file_dir +'/Obe'+'/'+file)
        label_Obe.append(1)
 
    print("There are %d ad\nThere are %d be\n" %(len(Oad), len(Obe)))
   
    
#step2：对生成的图片路径和标签List做打乱处理,合起来组成一个list（img和lab）
#np.hstack():合并数据，水平方向合并
    image_list = np.hstack((Oad, Obe))
    label_list = np.hstack((label_Oad, label_Obe ))
 
    #利用shuffle打乱顺序
    temp = np.array([image_list, label_list])
    #转换成2维矩阵
    temp = temp.transpose()
    #转置
    np.random.shuffle(temp)
    #按行随机打乱
    
    #从打乱的temp中再取出list（img和lab）
    #image_list = list(temp[:, 0])
    #label_list = list(temp[:, 1])
    #label_list = [int(i) for i in label_list]
    #return image_list, label_list
    
    #将所有的img和lab转换成list
    all_image_list = list(temp[:, 0])   #图片路径
    all_label_list = list(temp[:, 1])   #图片标签
    label_list = [int(i) for i in label_list]   #转换成int数据
    #将所得List分为两部分，一部分用来训练tra，一部分用来测试val
    #ratio是测试集的比例
    ratio = 0.7
    n_sample = len(all_label_list)
    n_val = int(math.ceil(n_sample*ratio))   #测试样本数
    n_train = n_sample - n_val   #训练样本数
 
    tra_images = all_image_list[0:n_train]
    tra_labels = all_label_list[0:n_train]
    tra_labels = [int(float(i)) for i in tra_labels]
    val_images = all_image_list[n_train:-1]
    val_labels = all_label_list[n_train:-1]
    val_labels = [int(float(i)) for i in val_labels]
 
    return tra_images, tra_labels, val_images, val_labels
    
    #return image_list, label_list
    #要用perwork看图的时候用这个返回值
    
#生成Batch
 
#step1：将上面生成的List传入get_batch() ，转换类型，产生一个输入队列queue，因为img和lab
#是分开的，所以使用tf.train.slice_input_producer()，然后用tf.read_file()从队列中读取图像
#   image_W, image_H, ：设置好固定的图像高度和宽度
#   设置batch_size：每个batch要放多少张图片
#   capacity：一个队列最大多少
def get_batch(image, label, image_W, image_H, batch_size, capacity):
    #转换类型
    image = tf.cast(image, tf.string)
    label = tf.cast(label, tf.int32)
 
    #产生输入队列
    input_queue = tf.train.slice_input_producer([image, label])#tensor生成器
 
    label = input_queue[1]
    image_contents = tf.read_file(input_queue[0]) #从队列中读取图像 
    
#step2：将图像解码，不同类型的图像不能混在一起，jpeg或者jpg格式都用decode_jpeg函数，要么只用jpeg，要么只用png等。
    image = tf.image.decode_jpeg(image_contents, channels=3)
    
    #就很奇怪，要用channels=3才行
    
#step3：数据预处理，对图像进行旋转、缩放、裁剪、归一化等操作，让计算出的模型更健壮。
    image = tf.image.resize_image_with_crop_or_pad(image, image_W, image_H)
    #标准化处理
    image = tf.image.per_image_standardization(image)
 
#step4：生成batch
#image_batch: 4D tensor [batch_size, width, height, 1],dtype=tf.float32 
#label_batch: 1D tensor [batch_size], dtype=tf.int32
    image_batch, label_batch = tf.train.batch([image, label],
                                                batch_size= batch_size,
                                                num_threads= 16, 
                                                capacity = capacity)
    #重新排列label，行数为[batch_size]
    label_batch = tf.reshape(label_batch, [batch_size])
    image_batch = tf.cast(image_batch, tf.float32)
    #显示灰度图
    return image_batch, label_batch     
    #即为传入神经网络的数据       
    
"""
def PreWork():
    # 对预处理的数据进行可视化，查看预处理的效果
    IMG_W = 512
    IMG_H = 512
    BATCH_SIZE = 10
    CAPACITY = 64

    train_dir = 'F:/1_Final/TFinput/'

    # image_list, label_list, val_images, val_labels = get_files(train_dir)
    
    #image_list, label_list = get_files(train_dir)
    image_list, label_list = get_files(train_dir)
    image_batch, label_batch = get_batch(image_list, label_list, IMG_W, IMG_H, BATCH_SIZE, CAPACITY)
    print(label_batch.shape)

    lists = ('Oad', 'Obe' )

    with tf.Session() as sess:
        i = 0
        coord = tf.train.Coordinator()  # 创建一个线程协调器，用来管理之后在Session中启动的所有线程
        threads = tf.train.start_queue_runners(coord=coord)
        try:
            while not coord.should_stop() and i < 1:
                # 提取出两个batch的图片并可视化。
                img, label = sess.run([image_batch, label_batch])  # 在会话中取出img和label
                # img = tf.cast(img, tf.uint8)

                '''
                1、range()返回的是range object，而np.arange()返回的是numpy.ndarray()
                range(start, end, step)，返回一个list对象，起始值为start，终止值为end，但不含终止值，步长为step。只能创建int型list。
                arange(start, end, step)，与range()类似，但是返回一个array对象。需要引入import numpy as np，并且arange可以使用float型数据。
                
                2、range()不支持步长为小数，np.arange()支持步长为小数
                
                3、两者都可用于迭代
                range尽可用于迭代，而np.nrange作用远不止于此，它是一个序列，可被当做向量使用。
                '''
                for j in np.arange(BATCH_SIZE):
                    # np.arange()函数返回一个有终点和起点的固定步长的排列
                    print('label: %d' % label[j])
                    plt.imshow(img[j, :, :, :])
                    title = lists[int(label[j])]
                    plt.title(title)
                    plt.show()
                i += 1
        except tf.errors.OutOfRangeError:
            print('done!')
        finally:
            coord.request_stop()
        coord.join(threads)

if __name__ == '__main__':
    PreWork()


 """